openapi: 3.0.3
info:
  title: API сервер для личного проекта «Что посмотреть».
  description: |-
    * Список ресурсов и маршрутов сервера «Что посмотреть».
  version: 1.0.0
tags:
  - name: users
    description: Пользователи
  - name: movies
    description: Фильмы
  - name: comments
    description: Комментарии

paths:
  /users/register:
    post:
      tags:
        - users
      summary: Создание нового пользователя.
      description: Регистрация нового пользователя в приложение.

      requestBody:
        description: Поля которые могут быть у пользователя (можно посмотреть в схеме по созданию пользователя)
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/createUser'
            encoding:
              avatar:
                contentType: image/png, image/jpeg
        required: true

      responses:
        "201":
          description: Пользователь успешно зарегистрирован.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "409":
          description: Пользователь с таким email уже существует :(

        "400":
          description: Неверный формат запроса :(


  /users/login:
    post:
      tags:
        - users
      summary: Вход в закрытую часть приложения
      description: Авторизует пользователя на основе логина и пароля

      requestBody:
        required: true
        description: Логин и пароль пользователя
        content:
          application/json:
            schema:
              type: object

              properties:
                login:
                  type: string
                  example: vladik@vk.ru

                password:
                  type: string
                  example: qwerty123

      responses:
        "200":
          description: Авторизация прошла успешно. Получай токен для работы в приложении :)
          content:
            application/json:
              schema:
                type: object

                properties:
                  token:
                    type: string
                    format: jwt

        "401":
          description: Пользователь не существует или была очепятка в пароле :(


    get:
      tags:
        - users
      summary: Информация о пользователе
      description: Возвращает информацию по авторизованному пользователю

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt

      responses:
        "200":
          description: Информация о пользователе успешно получена :)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "401":
          description: Невалидный токен :(

  /users/logout:
    post:
      tags:
        - users
      summary: Выход из сессии
      description: Возвращает токен который был добавлен черный лист

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt

      responses:
        "200":
          description: Токен был успешно добавлен в черный список
          content:
            application/json:
              schema:
                type: object

                properties:
                  token:
                    type: string
                    format: jwt
        "401":
          description: Невалидный токен :(

  /users/{userId}/avatar:
    post:
      tags:
        - users
      summary: Загрузка аватара пользователя
      description: Загружает иозображение аватара пользователя. Изображение аватара должно быть в формате .jpg или .png
      responses:
        "201":
          description: Аватар пользователя был успешно загружен
          content:
            application/json:
              schema:
                type: object

                properties:
                  avatarPath:
                    type: string

  /users/static:
    post:
      tags:
        - users
      summary: Загрузка всякого контента на сервер
      description: Загружаем всякий контент на сервер
      responses:
        "201":
          description: Контент был успешно загружен на сервер
          content:
            application/json:
              schema:
                type: object

                properties:
                  staticFile:
                    type: string

  /movies/create:
    post:
      tags:
        - movies
      summary: Добавление нового фильма
      description: Добавляет новый фильм в БД

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt

      requestBody:
        description: Поля которые нужны для добавления фильма (можно посмотреть в схеме createMovie)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createMovie'
        required: true

      responses:
        "201":
          description: Фильм был успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'

        "400":
          description: Неверный формат запроса :(

        "401":
          description: Необходимо пройти процесс авторизации :(


  /movies/{movieId}:
    get:
      tags:
        - movies
      summary: Получение информации по фильму
      description: Получает информацию по фильму по его id

      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: Уникальный идентификатор фильма

      responses:
        "200":
          description: Информация по фильму была успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'

        "404":
          description: Фильма с данным id не существует

    patch:
      tags:
        - movies
      summary: Редактирование карточки фильма
      description: Редактирует карточку фильма, созданную пользователем.

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: Movie id to update.

      requestBody:
        description: Полный набор информации по фильму.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateMovie'
        required: true

      responses:
        "200":
          description: Фильм обновлен. Новый объект фильма.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'

        "400":
          description: Не удалось обработать запрос, так как он представлен в неправильном формате или является некорректным.

        "401":
          description: Пользователь не авторизован. Редактировать карточки фильмов могут только авторизованные клиенты.

        "403":
          description: Пользователь не создавал фильм и поэтому не может его редактировать :(

        "404":
          description: Фильма с таким id нет :(


    delete:
      tags:
        - movies
      summary: Удаление карточки фильма
      description: Удаляет карточку фильма, созданную пользователем

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: Уникальный идентификатор фильма

      requestBody:
        description: Уникальный идентификатор пользователя который хочет удалить фильм
        content:
          application/json:
            schema:
              type: object

      responses:
        "204":
          description: Фильм был успешно удален :)

        "401":
          description: Нужно пройти авторизацию :(

        "403":
          description: Пользователь с id <userId> не может удалить фильм с id <movieId> :(

        "404":
          description: Фильм с таким id не был найден :(

  /movies?limit=40&genre=drama:
    get:
      tags:
        - movies
      summary: Получить все фильмы
      description: Возвращает список фильмов (по умолчанию не больше 60)

      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 60
            example: 40

        - in: query
          name: genre
          schema:
            type: string
            enum: [ comedy, crime, documentary, drama, horror, family, romance, scifi, thriller ]
            example: drama

      responses:
        "200":
          description: Список фильмов был успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movieListItem'

        "400":
          description: Не удалось обработать запрос, так как он представлен в неправильном формате или является некорректным.


  /movies/promo:
    get:
      tags:
        - movies
      summary: Получение информации по промо фильму
      description: Получение информации по промо фильму

      responses:
        "200":
          description: Информация по промо фильму была получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movie'


  /users/mylist:
    get:
      tags:
        - users
      summary: Получить «Мои фильмы»
      description: Возвращает список «Моих фильмов»

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt

      responses:
        "200":
          description: Успешно получены «Мои фильмы»
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movieListItem'

        "401":
          description: Необходимо пройти процесс авторизации :(


    post:
      tags:
        - users
      summary: Добавить фильм в «Мои фильмы»
      description: Добавляет фильм в список «Мои фильмы»

      requestBody:
        description: Уникальный идентификатор фильма который мы добавляем в «Мои фильмы»
        content:
          application/json:
            schema:
              type: object

              properties:
                movieId:
                  type: string
                  format: uuid
                  example: 6329c3d6a04ab1061c6425ease8u342

              required:
                - movieId

      responses:
        "204":
          description: Фильм успешно добавлен в список «Мои фильмы» :)

        "401":
          description: Необходимо пройти процесс авторизации :(


    delete:
      tags:
        - users
      summary: Удалить фильм «Мои фильмы»
      description: Удаляет фильм из списка «Мои фильмы»

      requestBody:
        description: Уникальный идентификатор фильма который хотим удалить из списка «Мои фильмы»
        content:
          application/json:
            schema:
              type: object

              properties:
                movieId:
                  type: string
                  format: uuid
                  example: 6329c3d6a04ab1061c6425ease8u342

              required:
                - movieId

      responses:
        "204":
          description: Фильм удален из списка «Мои фильмы»

        "401":
          description: Необходимо пройти процесс авторизации :(


  /movies/{movieId}/comments:
    get:
      tags:
        - comments
      summary: Комментарии к фильму
      description: Возвращает список комментариев для определенного фильма

      parameters:
        - in: path
          name: movieId
          schema:
            type: string
            format: uuid
          required: true
          description: Уникальный идентификатор для фильма

      responses:
        "200":
          description: Список комментариев к фильму был успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment'

        "404":
          description: Фильм с таким id не был найден :(


  /comments:
    post:
      tags:
        - comments
      summary: Добавить новый комментарий к определённому фильму
      description: Добавляет новый комментарий к определенному фильму.

      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt

      requestBody:
        description: Уникальный идентификатор фильма + информация по комментарию (можно посмотреть в схеме comment)
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/comment'
                - type: object
                  properties:
                    movieId:
                      type: string
                      format: uuid
                      example: 6329c3d6a04ab1061c6425ea
                  required:
                    - movieId

      responses:
        "200":
          description: Комментарий был успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'

        "400":
          description: Неверный формат запроса :(

        "401":
          description: Необходимо пройти процесс авторизации :(

        "404":
          description: Фильм с таким id не был найден :(


components:
  schemas:
    createUser:
      type: object

      properties:
        email:
          type: string
          format: email
          example: vladek@vk.ru

        name:
          type: string
          minLength: 1
          maxLength: 15
          example: kisik

        password:
          type: string
          minLength: 6
          maxLength: 12
          example: qwerty123

        avatar:
          type: string
          format: binary

      required:
        - email
        - password
        - name

    user:
      type: object

      properties:
        id:
          type: string
          example: 63c1997d74b62baff07d4b2a

        name:
          type: string
          example: kisik

        email:
          type: string
          example: vladik@vk.com

        avatarPath:
          type: string
          format: uri
          pattern: ([^\s]+(\.(jpg|png))$)
          example: /upload/8chKdsOiK.png


    createMovie:
      type: object

      properties:
        title:
          type: string
          minLength: 2
          maxLength: 100
          example: Авиатор

        description:
          type: string
          minLength: 20
          maxLength: 1024
          example: Получив от отца небольшую фабрику, Говард Хьюз превратил ее в гигантское, фантастически прибыльное предприятие. Став владельцем огромной кинокомпании, он снял самый дорогой для своего времени фильм и покорил сердца прелестнейших голливудских актрис.

        publishingDate:
          type: string
          format: date-time
          example: 2005-02-03T23:59:33.903Z

        genre:
          type: string
          enum: [ comedy, crime, documentary, drama, horror, family, romance, scifi, thriller ]
          example: drama

        releaseYear:
          type: integer
          minimum: 1895
          maximum: 2022
          example: 2005

        previewPath:
          type: string
          format: url
          example: https://what-to-watch.ru/preview/aviator.jpg

        moviePath:
          type: string
          format: url
          example: https://what-to-watch.ru/movie/aviator.jpg

        actors:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
          example: [ Леонардо Ди Каприо, Кейт Бланшетт, Джуд Ло ]

        director:
          type: string
          minLength: 2
          maxLength: 50
          example: Мартин Скорсезе

        duration:
          type: number
          minimum: 2
          example: 169

        posterPath:
          type: string
          format: uri
          pattern: ([^\s]+(\.(jpg|jpeg))$)
          example: static/aviator.jpg

        backgroundImagePath:
          type: string
          format: uri
          pattern: ([^\s]+(\.(jpg|jpeg))$)
          example: static/8ac7cjck.jpg

        backgroundColor:
          type: string
          example: pink

      required:
        - title
        - description
        - publishingDate
        - genre
        - releaseYear
        - previewPath
        - moviePath
        - actors
        - director
        - duration
        - posterPath
        - backgroundImagePath
        - backgroundColor

    movie:
      type: object

      properties:
        title:
          type: string
          minLength: 2
          maxLength: 100
          example: Авиатор

        description:
          type: string
          minLength: 20
          maxLength: 1024
          example: Получив от отца небольшую фабрику, Говард Хьюз превратил ее в гигантское, фантастически прибыльное предприятие. Став владельцем огромной кинокомпании, он снял самый дорогой для своего времени фильм и покорил сердца прелестнейших голливудских актрис.

        publishingDate:
          type: string
          format: date-time
          example: 2005-02-03T23:59:33.903Z

        genre:
          type: string
          enum: [ comedy, crime, documentary, drama, horror, family, romance, scifi, thriller ]
          example: drama

        releaseYear:
          type: integer
          minimum: 1895
          maximum: 2023
          example: 2005

        rating:
          type: integer
          minimum: 0
          maximum: 10
          example: 7

        previewPath:
          type: string
          format: url
          example: https://what-to-watch.ru/preview/aviator.jpg

        moviePath:
          type: string
          format: url
          example: https://what-to-watch.ru/movie/aviator.jpg

        actors:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
          example: [ Леонардо Ди Каприо, Кейт Бланшетт, Джуд Ло ]

        director:
          type: string
          minLength: 2
          maxLength: 50
          example: Мартин Скорсезе

        duration:
          type: number
          minimum: 2
          example: 169

        commentsCount:
          type: integer
          minimum: 0
          example: 290

        user:
          $ref: '#/components/schemas/user'

        posterPath:
          type: string
          format: uri
          pattern: ([^\s]+(\.(jpg|jpeg))$)
          example: static/aviator.jpg

        backgroundImagePath:
          type: string
          format: uri
          pattern: ([^\s]+(\.(jpg|jpeg))$)
          example: static/8ac7cjck.jpg

        backgroundColor:
          type: string
          example: pink

      required:
        - title
        - description
        - publishingDate
        - genre
        - releaseYear
        - rating
        - previewPath
        - moviePath
        - actors
        - director
        - duration
        - commentsCount
        - user
        - posterPath
        - backgroundImagePath
        - backgroundColor

    updateMovie:
      allOf:
        - $ref: '#/components/schemas/createMovie'


    movieListItem:
      type: object

      properties:
        title:
          type: string
          minLength: 2
          maxLength: 100
          example: Авиатор

        publishingDate:
          type: string
          format: date-time
          example: 2005-02-03T23:59:33.903Z

        genre:
          type: string
          enum: [ comedy, crime, documentary, drama, horror, family, romance, scifi, thriller ]
          example: drama

        previewPath:
          type: string
          format: url
          example: https://what-to-watch.ru/preview/aviator.jpg

        user:
          $ref: '#/components/schemas/user'

        posterPath:
          type: string
          format: uri
          pattern: ([^\s]+(\.jpg)$)
          example: static/aviator.jpg

        commentsCount:
          type: integer
          minimum: 0
          example: 290

      required:
        - title
        - publishingDate
        - genre
        - previewPath
        - user
        - posterPath
        - commentsCount


    comment:
      type: object

      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024
          example: Ди Каприо + Скорсезе === 🔥🔥🔥

        rating:
          type: integer
          minimum: 0
          maximum: 10
          example: 10

      required:
        - text
        - rating
